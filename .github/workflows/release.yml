name: Build and Release

on:
  push:
    tags:
      - "v*" # Trigger on version tags

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system dependencies
        run: |
          brew install create-dmg

      - name: Set up virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python3 -m pip install --upgrade pip

      - name: Install Python dependencies
        run: |
          source venv/bin/activate
          python3 -m pip install -r requirements.txt
          python3 -m pip install py2app==0.28.6

      - name: Verify config
        run: |
          mkdir -p src/config
          echo '{"sp_dc": ""}' > src/config/config.json
          ls -la src/config/

      - name: Setup Code Signing
        env:
          CERTIFICATE_BASE64: ${{ secrets.DEVELOPER_ID_APPLICATION_CER }}
          CERTIFICATE_KEY_BASE64: ${{ secrets.DEVELOPER_ID_APPLICATION_KEY }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create certificate files from secrets
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.cer
          echo "$CERTIFICATE_KEY_BASE64" | base64 --decode > certificate.key

          # Create p12 file
          openssl pkcs12 -export -name "Developer ID Application" \
            -in certificate.cer \
            -inkey certificate.key \
            -out certificate.p12 \
            -passout pass:"$P12_PASSWORD"

          # Configure Keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import certificate.p12 \
            -P "$P12_PASSWORD" \
            -A \
            -t cert \
            -f pkcs12 \
            -k $KEYCHAIN_PATH

          # Add keychain to search list
          security list-keychains -d user -s $KEYCHAIN_PATH

          # Allow codesign to access the keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Build App
        run: |
          source venv/bin/activate
          # Disable code signing in py2app
          export PY2APP_SKIP_CODESIGN=1
          python3 scripts/build_app.py

      - name: Sign App Bundle
        env:
          DEVELOPER_ID: ${{ secrets.DEVELOPER_ID_APPLICATION_NAME }}
        run: |
          # Sign frameworks and libraries
          find "dist/Spotify Lyrics Translator.app" -type f \( -name "*.so" -o -name "*.dylib" \) | while read lib; do
            codesign --force --sign "$DEVELOPER_ID" \
              --options runtime \
              --timestamp \
              --entitlements "entitlements.plist" \
              "$lib"
          done

          # Sign Python.framework
          if [ -d "dist/Spotify Lyrics Translator.app/Contents/Frameworks/Python.framework" ]; then
            codesign --force --sign "$DEVELOPER_ID" \
              --options runtime \
              --timestamp \
              --entitlements "entitlements.plist" \
              "dist/Spotify Lyrics Translator.app/Contents/Frameworks/Python.framework"
          fi

          # Sign the main app bundle
          codesign --force --sign "$DEVELOPER_ID" \
            --options runtime \
            --timestamp \
            --entitlements "entitlements.plist" \
            "dist/Spotify Lyrics Translator.app"

          # Verify signature
          codesign --verify --verbose=4 "dist/Spotify Lyrics Translator.app"

      - name: Notarize App
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: lando/notarize-action@v2
        with:
          product-path: "dist/Spotify Lyrics Translator.app"
          appstore-connect-username: ${{ secrets.APPLE_ACCOUNT_USERNAME }}
          appstore-connect-password: ${{ secrets.APPLE_ACCOUNT_PASSWORD }}
          appstore-connect-team-id: ${{ secrets.APPLE_TEAM_ID }}

      - name: Staple App
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          xcrun stapler staple "dist/Spotify Lyrics Translator.app"

      - name: Prepare App Icon
        run: |
          mkdir -p .tmp_icon
          cp assets/app_icon.icns .tmp_icon/.VolumeIcon.icns

      - name: Create DMG
        run: |
          source venv/bin/activate
          create-dmg \
            --volname "Spotify Lyrics Translator" \
            --volicon ".tmp_icon/.VolumeIcon.icns" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "Spotify Lyrics Translator.app" 200 200 \
            --hide-extension "Spotify Lyrics Translator.app" \
            --app-drop-link 600 200 \
            --no-internet-enable \
            "dist/Spotify Lyrics Translator.dmg" \
            "dist/Spotify Lyrics Translator.app"

      - name: Sign DMG
        env:
          DEVELOPER_ID: ${{ secrets.DEVELOPER_ID_APPLICATION_NAME }}
        run: |
          codesign --force --sign "$DEVELOPER_ID" \
            --options runtime \
            --timestamp \
            "dist/Spotify Lyrics Translator.dmg"

      - name: Notarize DMG
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: lando/notarize-action@v2
        with:
          product-path: "dist/Spotify Lyrics Translator.dmg"
          appstore-connect-username: ${{ secrets.APPLE_ACCOUNT_USERNAME }}
          appstore-connect-password: ${{ secrets.APPLE_ACCOUNT_PASSWORD }}
          appstore-connect-team-id: ${{ secrets.APPLE_TEAM_ID }}

      - name: Staple DMG
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          xcrun stapler staple "dist/Spotify Lyrics Translator.dmg"

      - name: Package App Bundle
        run: |
          cd dist
          ditto -c -k --keepParent "Spotify Lyrics Translator.app" "Spotify Lyrics Translator.app.zip"
          cd ..

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            dist/Spotify Lyrics Translator.app.zip
            dist/Spotify Lyrics Translator.dmg
          body: |
            # Spotify Lyrics Translator ${{ env.VERSION }}

            ## Installation

            ### Option 1: DMG Installer (Recommended)
            1. Download `Spotify Lyrics Translator.dmg`
            2. Open the DMG file
            3. Drag the app to your Applications folder
            4. Launch from Applications or Spotlight

            ### Option 2: Direct App
            1. Download `Spotify Lyrics Translator.app.zip`
            2. Extract the archive
            3. Move to Applications folder
            4. Launch the app

            ## System Requirements
            - macOS 10.13 or later
            - Spotify Premium account
            - Active internet connection

            ## Changes in this version
            <!-- Add release notes here -->
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload App Bundle
        uses: actions/upload-artifact@v3
        with:
          name: Spotify Lyrics Translator.app
          path: dist/Spotify Lyrics Translator.app.zip

      - name: Upload DMG
        uses: actions/upload-artifact@v3
        with:
          name: Spotify Lyrics Translator.dmg
          path: dist/Spotify Lyrics Translator.dmg
