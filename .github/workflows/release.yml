name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - "version.json"
      - "**.md"
      - ".gitignore"
      - ".github/**"
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - major
          - minor
          - patch

defaults:
  run:
    shell: bash -l {0}

jobs:
  version-and-release:
    runs-on: macos-latest
    permissions:
      contents: write
    if: "!contains(github.event.head_commit.message, 'chore: bump version')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Set up virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install py2app
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "PATH=$VIRTUAL_ENV/bin:$PATH" >> $GITHUB_ENV

      - name: Install system dependencies
        run: |
          brew install python-tk@3.11

      - name: Determine version bump
        id: version-bump
        if: github.event.inputs.version_type == '' || github.event.inputs.version_type == 'auto'
        run: |
          # Get commit messages since last tag
          COMMITS=$(git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --pretty=format:"%s")
          echo "Commit messages:"
          echo "$COMMITS"

          # Determine version bump type based on commit messages
          if echo "$COMMITS" | grep -iE "^break|^breaking|^major|BREAKING CHANGE"; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -iE "^feat|^feature|^minor"; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Set manual version type
        id: manual-version
        if: github.event.inputs.version_type != '' && github.event.inputs.version_type != 'auto'
        run: |
          echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT

      - name: Update version
        id: version
        run: |
          source venv/bin/activate
          # Use manual version type if provided, otherwise use determined type
          VERSION_TYPE="${{ github.event.inputs.version_type != '' && github.event.inputs.version_type != 'auto' && github.event.inputs.version_type || steps.version-bump.outputs.type }}"
          echo "Using version type: $VERSION_TYPE"

          # Run version manager with determined bump type
          python version_manager.py $VERSION_TYPE --no-tag

          # Get the new version
          VERSION=$(python -c "import json; print(json.load(open('version.json'))['major'], json.load(open('version.json'))['minor'], json.load(open('version.json'))['patch'], sep='.')")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release-notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 "HEAD^" 2>/dev/null || echo "")

          # Start collecting release notes
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT

          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT

          if [ -n "$PREV_TAG" ]; then
            # Group changes by type
            echo "### 🚀 Features" >> $GITHUB_OUTPUT
            git log $PREV_TAG..HEAD --pretty=format:"* %s" --grep="^feat" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            
            echo "### 🐛 Bug Fixes" >> $GITHUB_OUTPUT
            git log $PREV_TAG..HEAD --pretty=format:"* %s" --grep="^fix" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            
            echo "### 📝 Documentation" >> $GITHUB_OUTPUT
            git log $PREV_TAG..HEAD --pretty=format:"* %s" --grep="^docs" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            
            echo "### ♻️ Refactoring" >> $GITHUB_OUTPUT
            git log $PREV_TAG..HEAD --pretty=format:"* %s" --grep="^refactor" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            
            echo "### 🔧 Other Changes" >> $GITHUB_OUTPUT
            git log $PREV_TAG..HEAD --pretty=format:"* %s" --grep="^style\|^test\|^chore" >> $GITHUB_OUTPUT
          else
            echo "Initial release" >> $GITHUB_OUTPUT
          fi

          echo "" >> $GITHUB_OUTPUT
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ github.sha }}" >> $GITHUB_OUTPUT

          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and package
        run: |
          source venv/bin/activate

          # Clean any previous builds
          rm -rf build dist

          # Build the app
          python build_app.py

          # Create distribution files
          cd dist

          # Create ZIP archive
          zip -r "Spotify Lyrics Translator-${{ steps.version.outputs.version }}.zip" "Spotify Lyrics Translator.app"

          # Create DMG
          cd ..
          python create_dmg.py

      - name: Commit version changes
        run: |
          git add version.json setup.py
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
          git push

      - name: Create Git tag
        run: |
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          git push --tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.version.outputs.version }}"
          name: "Release v${{ steps.version.outputs.version }}"
          draft: false
          prerelease: false
          files: |
            dist/Spotify Lyrics Translator-${{ steps.version.outputs.version }}.zip
            dist/Spotify Lyrics Translator-${{ steps.version.outputs.version }}.dmg
          body: |
            ## Spotify Lyrics Translator v${{ steps.version.outputs.version }}

            ${{ steps.release-notes.outputs.NOTES }}

            ### Installation
            1. Download either the ZIP or DMG file
            2. If using DMG:
               - Open the DMG file
               - Drag the app to Applications folder
            3. If using ZIP:
               - Extract the ZIP file
               - Move the app to Applications folder
