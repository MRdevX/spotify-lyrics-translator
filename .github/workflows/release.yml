name: Build and Release

on:
  push:
    tags:
      - "v*" # Trigger on version tags

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            output_name: "Spotify Lyrics Translator.app"
            zip_name: "Spotify Lyrics Translator-macOS.zip"
            dmg_name: "Spotify Lyrics Translator.dmg"
            python_arch: "arm64"
          - os: windows-latest
            output_name: "Spotify Lyrics Translator.exe"
            zip_name: "Spotify Lyrics Translator-Windows.zip"
            python_arch: "x64"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"
          architecture: ${{ matrix.python_arch }}

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install create-dmg

      - name: Set up virtual environment
        shell: bash
        run: |
          python -m venv venv
          source venv/bin/activate || source venv/Scripts/activate
          python -m pip install --upgrade pip setuptools wheel

      - name: Install Python dependencies
        shell: bash
        run: |
          source venv/bin/activate || source venv/Scripts/activate
          python -m pip install -r requirements.txt
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            python -m pip install py2app==0.28.6
          else
            python -m pip install pyinstaller==6.3.0
          fi

      - name: Verify config
        shell: bash
        run: |
          mkdir -p src/config
          echo '{"sp_dc": ""}' > src/config/config.json
          ls -la src/config/

      - name: Set architecture flags
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "ARCHFLAGS=-arch arm64" >> $GITHUB_ENV
          else
            echo "ARCHFLAGS=-arch x86_64" >> $GITHUB_ENV
          fi

      - name: Build App (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          source venv/bin/activate
          export PYTHONPATH=$PYTHONPATH:$PWD
          export ARCHFLAGS=${{ env.ARCHFLAGS }}
          python scripts/build_app.py
          ls -la dist/"Spotify Lyrics Translator.app"/Contents/MacOS
          ls -la dist/"Spotify Lyrics Translator.app"/Contents/Resources

      - name: Build App (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          source venv/Scripts/activate
          export PYTHONPATH=$PYTHONPATH:$PWD
          export ARCHFLAGS=${{ env.ARCHFLAGS }}
          python -X utf8 scripts/build_app.py
          ls -la dist

      - name: Create DMG (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Prepare icon directory
          mkdir -p .tmp_icon
          cp assets/app_icon.icns .tmp_icon/.VolumeIcon.icns

          # Set permissions
          chmod -R 755 "dist/Spotify Lyrics Translator.app"

          # Create DMG
          create-dmg \
            --volname "Spotify Lyrics Translator" \
            --volicon ".tmp_icon/.VolumeIcon.icns" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "Spotify Lyrics Translator.app" 200 200 \
            --hide-extension "Spotify Lyrics Translator.app" \
            --app-drop-link 600 200 \
            --no-internet-enable \
            "dist/Spotify Lyrics Translator.dmg" \
            "dist/Spotify Lyrics Translator.app"

      - name: Package App (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd dist
          ditto -c -k --keepParent --rsrc "Spotify Lyrics Translator.app" "${{ matrix.zip_name }}"
          cd ..

      - name: Package App (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cd dist
          7z a "${{ matrix.zip_name }}" "Spotify Lyrics Translator"/*
          cd ..

      - name: Get version from tag
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Read changelog
        id: changelog
        shell: python
        run: |
          import json
          with open('version.json', 'r') as f:
              version_data = json.load(f)
          changelog = version_data.get('changelog', 'No changes recorded')
          # Escape newlines for GitHub Actions
          changelog = changelog.replace('\n', '%0A')
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f"changelog={changelog}", file=fh)

      - name: Create Release (macOS)
        if: matrix.os == 'macos-latest'
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            dist/${{ matrix.zip_name }}
            dist/${{ matrix.dmg_name }}
          body: |
            # Spotify Lyrics Translator ${{ env.VERSION }}

            ## What's Changed

            ${{ steps.changelog.outputs.changelog }}

            ## Installation (macOS)

            ### Option 1: DMG Installer (Recommended)
            1. Download `Spotify Lyrics Translator.dmg`
            2. Open the DMG file
            3. Drag the app to your Applications folder
            4. Launch from Applications or Spotlight

            ### Option 2: Direct App
            1. Download `Spotify Lyrics Translator-macOS.zip`
            2. Extract the archive
            3. Move to Applications folder
            4. Launch the app

            ## System Requirements (macOS)
            - macOS 10.13 or later
            - Apple Silicon or Intel Mac
            - Spotify Premium account
            - Active internet connection
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            dist/${{ matrix.zip_name }}
          body: |
            # Spotify Lyrics Translator ${{ env.VERSION }}

            ## What's Changed

            ${{ steps.changelog.outputs.changelog }}

            ## Installation (Windows)

            1. Download `Spotify Lyrics Translator-Windows.zip`
            2. Extract the archive
            3. Run `Spotify Lyrics Translator.exe`

            ## System Requirements (Windows)
            - Windows 10 or later (64-bit)
            - Spotify Premium account
            - Active internet connection
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: |
            dist/${{ matrix.zip_name }}
            ${{ matrix.os == 'macos-latest' && 'dist/Spotify Lyrics Translator.dmg' || '' }}
          if-no-files-found: error
          retention-days: 90
          compression-level: 6
          overwrite: true
          include-hidden-files: false
